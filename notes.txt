"""
What have we got with this? The PollSerializer class has a number of methods,
•	A is_valid(self, ..) method which can tell if the data is sufficient and valid to create/update a model instance.
•	A save(self, ..) method, which knows how to create or update an instance.
•	A create(self, validated_data, ..) method which knows how to create an instance. This method can be overriden to customize the create behaviour.
•	A update(self, instance, validated_data, ..) method which knows how to update an instance. This method can be overriden to customize the update behaviour.
"""
--------------------------------------------
•queryset: This determines the initial queryset. The queryset can be further filtered, sliced or ordered by the view.
•serializer_class: This will be used for validating and deserializing the input and for serializing the output.
We have used three different classes from rest_framework.generic. The names of the classes are representative of what they do, but lets quickly look at them.
•ListCreateAPIView: Get a list of entities, or create them. Allows GET and POST.
•RetrieveDestroyAPIView: Retrieve an individual entity details, or delete the entity. Allows GET and DELETE.
•CreateAPIView: Allows creating entities, but not listing them. Allows POST.
------------------------------------------------
Choosing the base class to use
We have seen 4 ways to build API views until now
•	Pure Django views
•	APIView subclasses
•	generics.* subclasses
•	viewsets.ModelViewSet
So which one should you use when? My rule of thumb is,
•	Use viewsets.ModelViewSet when you are going to allow all or most of CRUD operations on a model.
•	Use generics.* when you only want to allow some operations on a model
•	Use APIView when you want to completely customize the behaviour
----------------------------------------------------